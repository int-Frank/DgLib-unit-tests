#include "TestHarness.h"
#include "DgMatrix.h"

typedef Dg::Matrix<3, 4, double >     mat34;
typedef Dg::Matrix<2, 2, double >     mat22;
typedef Dg::Matrix<4, 3, double >     mat43;
typedef Dg::Matrix<4, 4, double >     mat44;
typedef Dg::Matrix<3, 3, double >     mat33;

//--------------------------------------------------------------------------------
//	Matrix Construction
//--------------------------------------------------------------------------------
TEST(Stack_DgMatrix_Construction, creation_DgMatrix_Construction)
{
  double m0Data[12];
  for (int i = 0; i < 12; ++i)
  {
    m0Data[i] = double(i + 2);
  }

  mat34 m34;
  mat43 m43;
  mat44 m44_t;

  m44_t(0, 0) = 62.0;
  m44_t(0, 1) = 71.0;
  m44_t(0, 2) = 80.0;
  m44_t(0, 3) = 89.0;
  m44_t(1, 0) = 116.0;
  m44_t(1, 1) = 134.0;
  m44_t(1, 2) = 152.0;
  m44_t(1, 3) = 170.0;
  m44_t(2, 0) = 170.0;
  m44_t(2, 1) = 197.0;
  m44_t(2, 2) = 224.0;
  m44_t(2, 3) = 251.0;
  m44_t(3, 0) = 224.0;
  m44_t(3, 1) = 260.0;
  m44_t(3, 2) = 296.0;
  m44_t(3, 3) = 332.0;

  m34.Set(m0Data);
  m43.Set(m0Data);

  mat44 m44 = m43 * m34;
  CHECK(m44 == m44_t);
  CHECK(!(m44 != m44_t));

  CHECK(m44(0, 0) == m44[0] && m44[0] == 62.0);
  CHECK(m44(0, 1) == m44[1] && m44[1] == 71.0);
  CHECK(m44(0, 2) == m44[2] && m44[2] == 80.0);
  CHECK(m44(0, 3) == m44[3] && m44[3] == 89.0);

  CHECK(m44(1, 0) == m44[4] && m44[4] == 116.0);
  CHECK(m44(1, 1) == m44[5] && m44[5] == 134.0);
  CHECK(m44(1, 2) == m44[6] && m44[6] == 152.0);
  CHECK(m44(1, 3) == m44[7] && m44[7] == 170.0);

  CHECK(m44(2, 0) == m44[8] && m44[8] == 170.0);
  CHECK(m44(2, 1) == m44[9] && m44[9] == 197.0);
  CHECK(m44(2, 2) == m44[10] && m44[10] == 224.0);
  CHECK(m44(2, 3) == m44[11] && m44[11] == 251.0);

  CHECK(m44(3, 0) == m44[12] && m44[12] == 224.0);
  CHECK(m44(3, 1) == m44[13] && m44[13] == 260.0);
  CHECK(m44(3, 2) == m44[14] && m44[14] == 296.0);
  CHECK(m44(3, 3) == m44[15] && m44[15] == 332.0);

  m44.Identity();
  CHECK(m44.IsIdentity());

  CHECK(m44(0, 0) == m44[0] && m44[0] == 1.0);
  CHECK(m44(0, 1) == m44[1] && m44[1] == 0.0);
  CHECK(m44(0, 2) == m44[2] && m44[2] == 0.0);
  CHECK(m44(0, 3) == m44[3] && m44[3] == 0.0);
                                         
  CHECK(m44(1, 0) == m44[4] && m44[4] == 0.0);
  CHECK(m44(1, 1) == m44[5] && m44[5] == 1.0);
  CHECK(m44(1, 2) == m44[6] && m44[6] == 0.0);
  CHECK(m44(1, 3) == m44[7] && m44[7] == 0.0);

  CHECK(m44(2, 0) == m44[8] && m44[8] == 0.0);
  CHECK(m44(2, 1) == m44[9] && m44[9] == 0.0);
  CHECK(m44(2, 2) == m44[10] && m44[10] == 1.0);
  CHECK(m44(2, 3) == m44[11] && m44[11] == 0.0);
                                           
  CHECK(m44(3, 0) == m44[12] && m44[12] == 0.0);
  CHECK(m44(3, 1) == m44[13] && m44[13] == 0.0);
  CHECK(m44(3, 2) == m44[14] && m44[14] == 0.0);
  CHECK(m44(3, 3) == m44[15] && m44[15] == 1.0);

  mat22 m22_0, m22_1;

  m22_0(0, 0) = 2.0;
  m22_0(0, 1) = 3.0;
  m22_0(1, 0) = 4.0;
  m22_0(1, 1) = 5.0;

  m22_1(0, 0) = 6.0;
  m22_1(0, 1) = 7.0;
  m22_1(1, 0) = 8.0;
  m22_1(1, 1) = 9.0;

  m22_0 *= m22_1;

  CHECK(m22_0(0, 0) == m22_0[0] && m22_0[0] == 36.0);
  CHECK(m22_0(0, 1) == m22_0[1] && m22_0[1] == 41.0);
  CHECK(m22_0(1, 0) == m22_0[2] && m22_0[2] == 64.0);
  CHECK(m22_0(1, 1) == m22_0[3] && m22_0[3] == 73.0);

  m22_0 = m22_1;
  CHECK(m22_0 == m22_1);

  m22_0.Transpose();
  m22_1 = Transpose(m22_1);

  CHECK(m22_0(0, 0) == m22_0[0] && m22_0[0] == 6.0);
  CHECK(m22_0(0, 1) == m22_0[1] && m22_0[1] == 8.0);
  CHECK(m22_0(1, 0) == m22_0[2] && m22_0[2] == 7.0);
  CHECK(m22_0(1, 1) == m22_0[3] && m22_0[3] == 9.0);

  CHECK(m22_1(0, 0) == m22_1[0] && m22_1[0] == 6.0);
  CHECK(m22_1(0, 1) == m22_1[1] && m22_1[1] == 8.0);
  CHECK(m22_1(1, 0) == m22_1[2] && m22_1[2] == 7.0);
  CHECK(m22_1(1, 1) == m22_1[3] && m22_1[3] == 9.0);

}

//--------------------------------------------------------------------------------
//	Matrix Methods
//--------------------------------------------------------------------------------
TEST(Stack_DgMatrix_Methods, creation_DgMatrix_Methods)
{
  Dg::Matrix<6, 8, int> m;

  for (int i = 0; i < 48; i++)
  {
    m[i] = i;
  }

  Dg::Matrix<2, 3, int> res0 = m.GetSubMatrix<2, 3>(1, 2);
  CHECK(res0(0, 0) == 10);
  CHECK(res0(0, 1) == 11);
  CHECK(res0(0, 2) == 12);
  CHECK(res0(1, 0) == 18);
  CHECK(res0(1, 1) == 19);
  CHECK(res0(1, 2) == 20);

  res0 = m.GetSubMatrix<2, 3>(2, 3);
  CHECK(res0(0, 0) == 19);
  CHECK(res0(0, 1) == 20);
  CHECK(res0(0, 2) == 21);
  CHECK(res0(1, 0) == 27);
  CHECK(res0(1, 1) == 28);
  CHECK(res0(1, 2) == 29);

  res0 = m.GetSubMatrix<2, 3>(4, 6);
  CHECK(res0(0, 0) == 38);
  CHECK(res0(0, 1) == 39);
  CHECK(res0(0, 2) == 0);
  CHECK(res0(1, 0) == 46);
  CHECK(res0(1, 1) == 47);
  CHECK(res0(1, 2) == 0);

  Dg::Matrix<3, 3, double> md;

  md[0] = 1;
  md[1] = 2;
  md[2] = 7.4;
  md[3] = 3;
  md[4] = 4;
  md[5] = 2.9;
  md[6] = -3.4;
  md[7] = 17.3;
  md[8] = 0.5;

  CHECK(Dg::AreEqual(md.Determinant(), 413.81));

}